
Procedural Oriented Approach:

main() {
	func1();
}

func1() {
	func2();
}

-------------------------------------------

Object Oriented Programming Approach:

	Key Feature: Data Hiding
	
Features:

	1. Data Hiding
	2. Resuability of Code
	3. Maintability and Scalability
	4. Reducing Space Complexity and so on.
	
Components of Object Oriented Programming Approach:

	1. Class
	2. Object
	3. Encapsulation
	4. Abstraction
	5. Inheritance
	6. Polymorphism
	
-----------------------------------------------------------

Class:

	- A user defined data structure data contains data members (fields, properties) and member functions (methods, constructors) and so on.
	- A class is a encapsulated blue-print for any entity.
	- Here, Data Members are Variables declared at class level.
	- And, Member Functions aree methods declared at class level.
	
	int number = 10;
	
	
	Student student1 = new Student();
	
	// Creating Reference Variable
	Student student1;
	// Object of Reference Variable
	student1 = new Student();
	
Object:

	- A representator of a class or instace of a class.
	- When create an object of a class, memory gets allocated to instance data members but member functions gets memory when they are called.
	
-----------------------------------------------------------------


Constructor:

	- A special method that has no return type.
	- The name of the constructor is same as that of the class name.
	- This is used to initialize the data members of a class.
	- This is invoked implicitly by compiler at the time of creating an object.
		
Note: If you do not assign values to data members then they get assign with default values based upon their data type. Each and Every class gets inherited from an Object class. If you don't any explicit constructor, these default values are assigned with constructor of this object class.
	
	
Types of Constructors:

	1. Default Constructor
	2. Parameterized Constructor
	3. Copy Constructor
	4. Static Constructor
	5. Private Constructor
	
--------------------------------------------------------------

Static Keyword:

	This keyword can be associated with Variable, Constructor, Method or Class.
	Static Members are not attached with an Object.
	Rather, They are attached with A class.
	
	// Static Data Member
	static string UniversityName;
	
	// Instance Data Member
	string UniversityName;
	
Static Constructor:

A static constructor is used to initialize the static member data or to perform some action only once in the beginning. It is called automatically before the first instance is created or any static members are referenced.

	- A static constructor does not take access modifiers or have parameters.
	- A class can only one static constructor
	- A class can have both instance and static construction in a single class.
	- A static constructor cannot be called directly.	
	
-----------------------------------------------------------

Private Constructor:

In some cases we create only static members. So creating an instance of that class become useless. We also use private constructor while implementing Singleton Design pattern where a class can have only one object.
	
-------------------------------------------------------------

Inheritance:

	- Helps in Resuablity of Code.
	- Helps in Reducing time and efforts of a programmar.
	- Inheritance means, creating sub classes of super class and extend the code based upon the requirement.
	
	Super Class -> Sub Class
	Parent Class -> Child Class
	Base Class -> Derived Class 

-----------------------------------------------------------------------

Encapsulation: Hiding of Data
Abstraction: Abstract or Retrieve Relevant Data

Access Modifiers: private, public, protected, internal

private: Default Modifier, Allows a member to be accessed within the class.

public: Allows a member to be accessed from anywhere.

protected: Allows a member to be accessed within the class and its child class

internal: Allows a members to be accessed within the namespace or project.
	
-----------------------------------------------------------------------

Components of Object Oriented Programming Approach:

	1. Class
	2. Object
	3. Encapsulation
	4. Abstraction
	5. Inheritance
	6. Polymorphism
	
------------------------------------------------------------------------

Polymorphism:

	poly means many and morpho means forms.
	
	Key Feature: One Interface Many Functions.
	
	Example: Human, Visual Studio 2019.
	
Types of Polymorphism:

	1. Static Polymorphism / Compile-Time Polymorphism / Early Binding
	
		Method Overloading
		Constructor Overloading
		
	2. Dynamic Polymorphism / Run-Time Polymorphism / Late Binding
	
		Method Overriding
		
-------------------------------------------------------------------

Method Overloading:

	A class can have more than one methods with same name but different method signatures or parameters. There are three different function signatures that helps in Overloading:
	
	1. Number of Parameters
	
		public int addition(int num1, int num2)
		public int addition(int num1, int num2, int num3)
	
	2. Type of Parameters
	
		public int addition(int num1, int num2)
		public float addition(float num1, float num2)
	
	3. Sequence of Parameters
	
		public float addition(int num1, float num2)
		public float addition(float num1, int num2)
		
-------------------------------------------------------------------------

Method Overriding:

	The process of re-implmenting the superclass methods into sub classes with the same signature. This cannot be achieved without inheritance.
	
	Method Overloading can be implemented with the helps of:
	
	abstract classes and Methods
	Interfaces
	
----------------------------------------------------------------------

Abstract Class and Abstract Method:

	- An Abstract class cannot be instantiated.
	- An abstract class can contain abstract and non-abstract methods.
	- An abstract method cannot have to implement in abstract class.
	- An class cannot be inerited from multiple abstract classes.
	- An abstract method can only be declared in abstract class.
	- All derived class must implment all the abstract methods in it.
	
----------------------------------------------------------------------
	
Interface:

	- An interface is an contract for sub classes.
	- All the undefined methods of an interface by default abstract and public.
	- All derived class must implment all the abstract methods in it.
	- An interface can contain abstract and non-abstract methods.
	- An interface also allows multiple inheritance.
	
----------------------------------------------------------------------
	
Properties:

	A property is a member of a class which is used to set and get the data from a data fields of a class. To implement properties we use get accessors and set accessors.
	
Types of Properties:

	1. Read-Only Property
	2. Write-Only Property
	3. Read-Write Property
	4. Auto Implmented 
Exception Handling
File Handling
Misc Types
var, annoymous and dynamic types
tuples type
propertiesindexers

------------------------------------------------------------

Exception Handling:

When we write and execute our code, there is a possiblity of getting errors.
Thus, below mentioned types of errors can occurred:

1. Compile-Time Errors
	a. Misspell the keywords,
	b. Incorrect syntax
	c. Incorrect expression (Sementic Errors)
		c = a + b; (Correct Expression)
		a + b = c; (Incorrect Expression)
		
2. Logical Errors
	Logical Errors occurred when we do not get the expected output.
	To check even number:
	100%2==0 ? "Even" : "Odd"; (Correct)
	100/2==0 ? "Even" : "Odd"; (Incorrect) - Logical Error

3. Run-Time Errors (Exceptions)
	Run-Time errors occurred at the time of program execution.
	Generally , they are occurred due to incorrect inputs, file permissions, connecting with database, missing required resources and so on. Run-Time Errors are also known as Exceptions.
	
	TO handle/resolve Run-Time Errors, we use exception handling.
	Below are the blocks and statements we use in exception handling:
	
	1. try: A block in which we write a piece of code, where chances of gettings exceptions are high.
	2. catch: try block will be followed by catch block or multiple blocks to handle or prompt the run time errors.
	3. finally
	4. throw
	
------------------------------------------------------------

File Handling:

	Namespace: System.IO
	
	Classes: 
	FileStream, 
	StreamReader, StreamWriter, 
	TextWriter, TextReader, 
	BinaryReader, BinaryWriter
	
	FileModes: Create, CreateNew, Open, OpenOrCreate, Append
	
------------------------------------------------------------

Serialization and Deserialization:

	C# Objects are written in serialized files. 
	To read these serialized files you need to deserialize the objects.


-----------------------------------------------------------------


Data Structures:

	Data Structure provides difference algorithms or logics to solve a problem. Being a developer we need to find the best and effective algorithms by implmenting trade off between space complexity and time complexity.
	
	We trade off between time complexity and space complexity.
	
	Delhi to Bangalore (Trade off between Time and Cost):
		Flight - Expensive but less time
		Train - Least Expensive but more than expected time

-------------------------------------------------------------------

Big O Notation:

	A mathematical notation that describes the limiting behaviour of a function when the arguments tends towards a particular value or infinity.
	
	In other words, we use Big O notation to describe the performance of an alogorithm or to check the time complexity.
	
Big O Notations:
	
	Constant Notation - O(1)
	Linear Notation - O(n)
	Logarithmic Notation - O(log n)
	Quadratic Notation  - O(n^2)
	Exponential Notation - O(2^n)
	
-------------------------------------------------------------------

ArrayList:

	- A collection class in C#
	- It works like an Array but provides the facilities such as dynamic resizing, adding and elements from the middle, front and last.
	- This class is available in System.Collection namespace.
	- This class consists various properties and Methods to work with.

-------------------------------------------------------------------

Stack:

	- A non-generic collection class.
	- works in the LIFO(Last IN First Out) principle.
	
Applications using Stack:

	- Undo Feature
	- Build Compliers (E.g. Syntax Checking)
	- Evaluation Expressions 
	- Build Navigation (e.g. forward/back)
	
Operations using Stack:

push(item)	:	To insert new element in to stack.
pop() 		: 	To delete existing element from stack.
peek()		:	To tell you which element is ready to pop.
isEmpty()	:	To check whether stack is empty or not.

-------------------------------------------------------------------

Queue:

	- A non-generic collection class.
	- Works in FIFO (First-In-First-Out).
	
Applications using Queue:

1. Printers
2. Operating Systems
3. Web Servers
4. Live Support Systems

Operations using Queue:

enqueue	: To insert element into the queue.
dequeue	: To delete existing element from the queue.
peek	: To check which element is ready to dequeue.
isEmpty : To check whether queue is empty or not.
isFull	: To check whether queue is full or not.

------------------------------------------------------------------------------------------------------------------


Array, LinkedList, Stack and Queue - Linear Data Structure

Pattern Matching:

	- A way to test a value, whether it is specific type of not.
	- Pattern matching uses:
		- 'is' expression
		- 'case' expression
		
--------------------------------------------------------

In, Out, Ref Parameters:

Out Variable:

-------------------------------------------------------






























----------------------------------------------------------------------

